{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.6.18.56646",
      "templateHash": "7852282142701333933"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for the resources."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine."
      },
      "allowedValues": [
        "password",
        "sshPublicKey"
      ]
    },
    "adminPasswordOrKey": {
      "type": "secureString",
      "metadata": {
        "description": "Password or ssh key for the Virtual Machine."
      }
    },
    "virtualNetwork": {
      "type": "object",
      "metadata": {
        "description": "virtualNetwork properties from VirtualNetworkCombo"
      }
    },
    "cClearVMSize": {
      "type": "string",
      "metadata": {
        "description": "cclear VM size"
      }
    },
    "cClearCount": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Number of cClears"
      }
    },
    "cClearVmName": {
      "type": "string",
      "metadata": {
        "description": "cClear VM Name"
      }
    },
    "cClearImage": {
      "type": "object",
      "metadata": {
        "description": "cClear Image URI"
      }
    },
    "cClearImageURI": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "cClear Image Version"
      }
    },
    "cvuVMSize": {
      "type": "string",
      "metadata": {
        "description": "cvu VM size"
      }
    },
    "cvuCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of cVus"
      }
    },
    "cvuVmName": {
      "type": "string",
      "metadata": {
        "description": "cVu Base VM Name"
      }
    },
    "cvuImage": {
      "type": "object",
      "metadata": {
        "description": "cvu Image URI"
      }
    },
    "cVuImageURI": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "cvu Image Version"
      }
    },
    "cVu3rdPartyToolIPs": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "cVu 3rd Party Tools"
      }
    },
    "cstorVMSize": {
      "type": "string",
      "metadata": {
        "description": "cvu VM size"
      }
    },
    "cstorCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of cStors"
      }
    },
    "cstorVmName": {
      "type": "string",
      "metadata": {
        "description": "cStor VM Name"
      }
    },
    "cstorDiskCount": {
      "type": "int",
      "metadata": {
        "description": "cStor Disk Count"
      }
    },
    "cstorDiskSize": {
      "type": "int",
      "metadata": {
        "description": "cStor Size Count"
      }
    },
    "cstorImage": {
      "type": "object",
      "metadata": {
        "description": "cstor Image URI"
      }
    },
    "cStorImageURI": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "cstor Image Version"
      }
    },
    "tagsByResource": {
      "type": "object",
      "metadata": {
        "description": "tags from TagsByResource"
      }
    }
  },
  "variables": {
    "$fxv#0": "",
    "$fxv#1": "IyEvYmluL2Jhc2gKCiMgY1Z1LVYtayBpbmxpbmUgYm9vdCBjb25maWcgc2V0dGluZ3MKY2F0IDw8RU9GX0JPT1RDRkcgPi9ob21lL2NwYWNrZXQvYm9vdF9jb25maWcudHh0CnsKJ3ZtX3R5cGUnOiAnYXp1cmUnLAonY2FwdHVyZV9tb2RlJzogJ2xpYnBjYXAnLAonZGVjYXBfbW9kZSc6ICd2eGxhbicsCidudW1fcGNhcF9idWZzJzogMiwKJ2NhcHR1cmVfbmljX2luZGV4JzogMCwKJ3BjaV93aGl0ZWxpc3QnOiAnMDAwMTowMDowMi4wJywKJ2V0aF9kZXYnOiAnZXRoMCcsCidjb3JlX21hc2snOiAnMHgzJywKJ2J1cm5zaWRlX21vZGUnOiBGYWxzZSwKJ2NzdG9yX2xpdGVfbW9kZSc6IEZhbHNlLAonc3NoJzogeydlbmFibGVkJzogVHJ1ZX0sCidjbGVhbnVwX3RocmVzaG9sZCc6IDUwLAondXNlX2NvbXByZXNzaW9uJzogVHJ1ZSwKJ3J1bl9jZmxvd19tb2RlJzogVHJ1ZSwKJ3RpZXJlZF9zdG9yX2VuJzogRmFsc2UsCidjYXB0dXJlX25pY19ldGgnOiAnZXRoMCcsCidtYW5hZ2VtZW50X25pY19ldGgnOiAnZXRoMCcsCn0KRU9GX0JPT1RDRkcKCmNobW9kIHVnK3cgL2hvbWUvY3BhY2tldC9ib290X2NvbmZpZy50eHQKCmVjaG8gImNsb3VkLWluaXQgcmFuIHVzZXItZGF0YSBhdDogIiAkKGRhdGUpID4+L2hvbWUvY3BhY2tldC9wcmVib290bXNnLnR4dA==",
    "$fxv#2": "IyEvYmluL2Jhc2gKCiMgY1Z1LVYtayBpbmxpbmUgbW9kZSBjb25maWcgZXhhbXBsZQoKIyBjdnV2X25hdF94eHggdmFsdWVzIGRlZmluZSBOQVQgcGFzc3Rocm91Z2hzIC0gdXAgdG8gNCBhbGxvd2VkCiMgICAoc3VmZml4IF8wLF8xLF8yLCBfMykKIyAgICBOT1RFIDogbG9jYWwgUkVTRVJWRUQgcG9ydHMgNDQzLDgwLDIyLDE2MSwxNjIKIyBjdnV2X25hdF9sb2NfaXAsIGN2dXZfbmF0X2RzdF9pcCA6IGVtcHRyeSBzdHJpbmdzICgnJykgd2lsbCBkaXNhYmxlIHRoYXQgbmF0IHBvcnQKCiMgZm9yIGN2dXZfdnhsYW5fc3JjaXAsIGN2dXZfdnhsYW5fcmVtb3RlaXAgOiBlbXB0eSBzdHJpbmdzICgnJykgd2lsbCBkaXNhYmxlCiMgdGhlIHZ4bGFuIG91dHB1dCBwb3J0LgoKIyBjVnUtVi1rIGlubGluZQpjYXQgPDxFT0ZfQk9PVENGRyA+L2hvbWUvY3BhY2tldC9ib290X2NvbmZpZy50eHQKewondm1fdHlwZScgICAgICAgICAgICAgICA6ICdhenVyZScsCidjYXB0dXJlX21vZGUnICAgICAgICAgIDogJ2N2dXYnLAonY3Z1dl9tb2RlJyAgICAgICAgICAgICA6ICdpbmxpbmUnLAonY3Z1dl9pbmxpbmVfbW9kZScgICAgICA6ICd0Y3RhcCcsCidjdnV2X21pcnJvcl9ldGhfMCcgICAgIDogJ2V0aDAnLAonY3Z1dl9tYXhfdnhsYW5fcG9ydHMnICA6IDMsCgonY3Z1dl92eGxhbl9kZXZfMCcgICAgICA6ICd2eGxhbjAnLAonY3Z1dl92eGxhbl9zcmNpcF8wJyAgICA6ICcnLAonY3Z1dl92eGxhbl9yZW1vdGVpcF8wJyA6ICcnLAonY3Z1dl92eGxhbl9pZF8wJyAgICAgICA6ICcyMTEwJywKJ2N2dXZfdnhsYW5fZXRoXzAnICAgICAgOiAnY3Z1dl9taXJyb3JfZXRoXzAnLAoKJ2N2dXZfdnhsYW5fZGV2XzEnICAgICAgOiAndnhsYW4xJywKJ2N2dXZfdnhsYW5fc3JjaXBfMScgICAgOiAnJywKJ2N2dXZfdnhsYW5fcmVtb3RlaXBfMScgOiAnJywKJ2N2dXZfdnhsYW5faWRfMScgICAgICAgOiAnMjIxMScsCidjdnV2X3Z4bGFuX2V0aF8xJyAgICAgIDogJ2N2dXZfbWlycm9yX2V0aF8wJywKCidjdnV2X3Z4bGFuX2Rldl8yJyAgICAgIDogJ3Z4bGFuMicsCidjdnV2X3Z4bGFuX3NyY2lwXzInICAgIDogJycsCidjdnV2X3Z4bGFuX3JlbW90ZWlwXzInIDogJycsCidjdnV2X3Z4bGFuX2lkXzInICAgICAgIDogJzIyMTInLAonY3Z1dl92eGxhbl9ldGhfMicgICAgICA6ICdjdnV2X21pcnJvcl9ldGhfMCcsCgonY3Z1dl9uYXRfbG9jX3Byb3RvXzAnICA6ICd0Y3AnLAonY3Z1dl9uYXRfbG9jX2lwXzAnICAgICA6ICcnLAonY3Z1dl9uYXRfbG9jX3BvcnRfMCcgICA6ICcnLAonY3Z1dl9uYXRfZHN0X2lwXzAnICAgICA6ICcnLAonY3Z1dl9uYXRfZHN0X3BvcnRfMCcgICA6ICcnLAoKJ2J1cm5zaWRlX21vZGUnICAgICAgICAgOiBGYWxzZSwKJ2NzdG9yX2xpdGVfbW9kZScgICAgICAgOiBGYWxzZSwKJ3NzaCcgICAgICAgICAgICAgICAgICAgOiB7J2VuYWJsZWQnOiBUcnVlfSwKJ2NhcHR1cmVfbmljX2V0aCcgCSAgICA6ICdldGgwJywKJ21hbmFnZW1lbnRfbmljX2V0aCcJOiAnZXRoMCcsCn0KRU9GX0JPT1RDRkcKCiMgbWFrZSB3cml0YWJsZSBzbyB0aGF0IG5leHQgYm9vdCBjYW4gb3ZlcndyaXRlIGlmIG5lZWQgYmUKY2htb2QgdWcrdyAvaG9tZS9jcGFja2V0L2Jvb3RfY29uZmlnLnR4dAoKZWNobyAiY2xvdWQtaW5pdCByYW4gdXNlci1kYXRhIGF0OiAiICQoZGF0ZSkgPj4vaG9tZS9jcGFja2V0L3ByZWJvb3Rtc2cudHh0",
    "$fxv#3": "IyEvYmluL2Jhc2gKCgpjYXB0dXJlX25pY19pcD0kKGlmY29uZmlnIGV0aDAgfCBncmVwICdpbmV0ICcgfCBhd2sgJ3twcmludCAkMn0nKQoKY2F0IDw8RU9GX0JPT1RDRkcgPi9ob21lL2NwYWNrZXQvYm9vdF9jb25maWcudG9tbAp7Cid2bV90eXBlJyAgICAgICAgICAgICAgIDogJ2F6dXJlJywKJ2NhcHR1cmVfbW9kZScgICAgICAgICAgOiAnY3Z1dicsCidjdnV2X21vZGUnICAgICAgICAgICAgIDogJ2lubGluZScsCidjdnV2X2lubGluZV9tb2RlJyAgICAgIDogJ3RjdGFwJywKJ2N2dXZfbWlycm9yX2V0aF8wJyAgICAgOiAnZXRoMCcsCgonY3Z1dl92eGxhbl9zcmNpcF8wJyAgICA6ICckY2FwdHVyZV9uaWNfaXAnLAonY3Z1dl92eGxhbl9yZW1vdGVpcF8wJyA6ICcnLAonY3Z1dl92eGxhbl9pZF8wJyAgICAgICA6ICcxMzM3JywKCidjdnV2X3Z4bGFuX3NyY2lwXzEnICAgIDogJyRjYXB0dXJlX25pY19pcCcsCidjdnV2X3Z4bGFuX3JlbW90ZWlwXzEnIDogJycsCidjdnV2X3Z4bGFuX2lkXzEnICAgICAgIDogJzEzMzgnLAoKJ2N2dXZfdnhsYW5fc3JjaXBfMicgICAgOiAnJGNhcHR1cmVfbmljX2lwJywKJ2N2dXZfdnhsYW5fcmVtb3RlaXBfMicgOiAnJywKJ2N2dXZfdnhsYW5faWRfMicgICAgICAgOiAnMTMzOScsCgonY3Z1dl92eGxhbl9zcmNpcF8zJyAgICA6ICckY2FwdHVyZV9uaWNfaXAnLAonY3Z1dl92eGxhbl9yZW1vdGVpcF8zJyA6ICcnLAonY3Z1dl92eGxhbl9pZF8zJyAgICAgICA6ICcxMzQwJywKCidjdnV2X3Z4bGFuX3NyY2lwXzQnICAgIDogJyRjYXB0dXJlX25pY19pcCcsCidjdnV2X3Z4bGFuX3JlbW90ZWlwXzQnIDogJycsCidjdnV2X3Z4bGFuX2lkXzQnICAgICAgIDogJzEzNDEnLAoKJ2N2dXZfdnhsYW5fc3JjaXBfNScgICAgOiAnJGNhcHR1cmVfbmljX2lwJywKJ2N2dXZfdnhsYW5fcmVtb3RlaXBfNScgOiAnJywKJ2N2dXZfdnhsYW5faWRfNScgICAgICAgOiAnMTM0MicsCgonY3Z1dl92eGxhbl9zcmNpcF82JyAgICA6ICckY2FwdHVyZV9uaWNfaXAnLAonY3Z1dl92eGxhbl9yZW1vdGVpcF82JyA6ICcnLAonY3Z1dl92eGxhbl9pZF82JyAgICAgICA6ICcxMzQzJywKCidjdnV2X3Z4bGFuX3NyY2lwXzcnICAgIDogJyRjYXB0dXJlX25pY19pcCcsCidjdnV2X3Z4bGFuX3JlbW90ZWlwXzcnIDogJycsCidjdnV2X3Z4bGFuX2lkXzcnICAgICAgIDogJzEzNDQnLAoKJ2N2dXZfdnhsYW5fc3JjaXBfOCcgICAgOiAnJGNhcHR1cmVfbmljX2lwJywKJ2N2dXZfdnhsYW5fcmVtb3RlaXBfOCcgOiAnJywKJ2N2dXZfdnhsYW5faWRfOCcgICAgICAgOiAnMTM0NScsCgp9CkVPRl9CT09UQ0ZHCgoKSUZTPScgJyByZWFkIC1yYSBBRERSIDw8PCAiJFJFTU9URV9JUFMiCmZvciBpIGluICIkeyFBRERSW0BdfSI7IGRvCiAgIyBTZXQgdGhlIHJlbW90ZSBJUHMgaW4gdGhlIGN2dV92eGxhbl9yZW1vdGVpcF8qIHZhcmlhYmxlcwogIHNlZCAtaSAic3wnY3Z1dl92eGxhbl9yZW1vdGVpcF8kaScgOiAnJyx8J2N2dXZfdnhsYW5fcmVtb3RlaXBfJGknIDogJyR7QUREUltpXX0nLHwiIC9ob21lL2NwYWNrZXQvYm9vdF9jb25maWcudG9tbApkb25lCgoKCmNobW9kIHVnK3cgL2hvbWUvY3BhY2tldC9ib290X2NvbmZpZy50b21sCmVjaG8gImNsb3VkLWluaXQgcmFuIHVzZXItZGF0YSBhdDogIiAkKGRhdGUpID4+L2hvbWUvY3BhY2tldC9wcmVib290bXNnLnR4dA==",    
    "cvulbName": "[format('{0}_iLB', parameters('cvuVmName'))]",
    "$cvuv_user_data": "capture_nic_ip=$(ip addr show eth0 | grep 'inet ' | awk '{print $2}' | cut -d/ -f1)\ncat >/home/cpacket/boot_config.toml <<EOF_BOOTCFG\n{ \"vm_type\" : \"azure\", \"capture_mode\" : \"cvuv\", \"cvuv_mode\" : \"inline\", \"cvuv_inline_mode\" : \"tctap\", \"cvuv_mirror_eth_0\" : \"eth0\", \"cvuv_vxlan_srcip_0\" : \"$capture_nic_ip\", \"cvuv_vxlan_remoteip_0\" : \"\", \"cvuv_vxlan_id_0\" : \"1337\", \"cvuv_vxlan_srcip_1\" : \"$capture_nic_ip\", \"cvuv_vxlan_remoteip_1\" : \"\", \"cvuv_vxlan_id_1\" : \"1338\", \"cvuv_vxlan_srcip_2\" : \"$capture_nic_ip\", \"cvuv_vxlan_remoteip_2\" : \"\", \"cvuv_vxlan_id_2\" : \"1339\", \"cvuv_vxlan_srcip_3\" : \"$capture_nic_ip\", \"cvuv_vxlan_remoteip_3\" : \"\", \"cvuv_vxlan_id_3\" : \"1340\", \"cvuv_vxlan_srcip_4\" : \"$capture_nic_ip\", \"cvuv_vxlan_remoteip_4\" : \"\", \"cvuv_vxlan_id_4\" : \"1341\", \"cvuv_vxlan_srcip_5\" : \"$capture_nic_ip\", \"cvuv_vxlan_remoteip_5\" : \"\", \"cvuv_vxlan_id_5\" : \"1342\", \"cvuv_vxlan_srcip_6\" : \"$capture_nic_ip\", \"cvuv_vxlan_remoteip_6\" : \"\", \"cvuv_vxlan_id_6\" : \"1343\", \"cvuv_vxlan_srcip_7\" : \"$capture_nic_ip\", \"cvuv_vxlan_remoteip_7\" : \"\", \"cvuv_vxlan_id_7\" : \"1344\", \"cvuv_vxlan_srcip_8\" : \"$capture_nic_ip\", \"cvuv_vxlan_remoteip_8\" : \"\", \"cvuv_vxlan_id_8\" : \"1345\" }\nEOF_BOOTCFG\nIFS=' ' read -ra ADDR <<< \"$REMOTE_IPS\"\nfor i in \"${!ADDR[@]}\"; do\n sed -i \"s|\"cvuv_vxlan_remoteip_$i\" : \"\",|\"cvuv_vxlan_remoteip_$i\" : \"${ADDR[i]}\",|\" /home/cpacket/boot_config.toml\ndone\nchmod ug+w /home/cpacket/boot_config.toml\necho 'cloud-init ran user-data at: ' $(date) >>/home/cpacket/prebootmsg.txt",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    },
    "cclear_enabled": "[if(greater(parameters('cClearCount'), 0), true(), false())]",
    "cvu_enabled": "[if(greater(parameters('cvuCount'), 0), true(), false())]",
    "cstor_enabled": "[if(greater(parameters('cstorCount'), 0), true(), false())]",
    "cstorilb_enabled": "[if(greater(parameters('cstorCount'), 1), true(), false())]",
    "cvuilb_enabled": "[if(greater(parameters('cvuCount'), 1), true(), false())]",
    "monsubnetId": "[if(equals(parameters('virtualNetwork').newOrExisting, 'new'), resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name), resourceId(parameters('virtualNetwork').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name))]",
    "cclearImageURI": "[if(empty(parameters('cClearImageURI')), parameters('cClearImage').id, parameters('cClearImageURI'))]",
    "cstorImageURI": "[if(empty(parameters('cStorImageURI')), parameters('cstorImage').id, parameters('cStorImageURI'))]",
    "cvuImageURI": "[if(empty(parameters('cVuImageURI')), parameters('cvuImage').id, parameters('cVuImageURI'))]"
  },
  "resources": [
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[parameters('virtualNetwork').name]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[parameters('virtualNetwork').addressPrefixes]"
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/virtualNetworks'), parameters('tagsByResource')['Microsoft.Network/virtualNetworks'], null())]"
    },
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}/{1}', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]",
      "properties": {
        "addressPrefix": "[parameters('virtualNetwork').subnets.monSubnet.addressPrefix]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
      ]
    },
    {
      "condition": "[variables('cclear_enabled')]",
      "copy": {
        "name": "cclearnic",
        "count": "[length(range(0, parameters('cClearCount')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}-{1}-nic', parameters('cClearVmName'), range(0, parameters('cClearCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[format('{0}-{1}-ipconfig-nic', parameters('cClearVmName'), range(0, parameters('cClearCount'))[copyIndex()])]",
            "properties": {
              "subnet": {
                "id": "[variables('monsubnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            }
          }
        ]
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]"
      ]
    },
    {
      "condition": "[variables('cclear_enabled')]",
      "copy": {
        "name": "cclearvm",
        "count": "[length(range(0, parameters('cClearCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}-{1}', parameters('cClearVmName'), range(0, parameters('cClearCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('cClearVMSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[variables('cclearImageURI')]"
          },
          "osDisk": {
            "osType": "Linux",
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "deleteOption": "Delete"
          },
          "dataDisks": [
            {
              "name": "[format('{0}-{1}-DataDisk1', parameters('cClearVmName'), range(0, parameters('cClearCount'))[copyIndex()])]",
              "lun": 1,
              "createOption": "Empty",
              "diskSizeGB": 500,
              "caching": "ReadWrite",
              "deleteOption": "Delete"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-nic', parameters('cClearVmName'), range(0, parameters('cClearCount'))[range(0, parameters('cClearCount'))[copyIndex()]]))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[format('{0}-{1}', parameters('cClearVmName'), range(0, parameters('cClearCount'))[copyIndex()])]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]",
          "customData": "[variables('$fxv#0')]"
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), parameters('tagsByResource')['Microsoft.Compute/virtualMachines'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-nic', parameters('cClearVmName'), range(0, parameters('cClearCount'))[range(0, parameters('cClearCount'))[copyIndex()]]))]"
      ]
    },
    {
      "condition": "[variables('cstor_enabled')]",
      "copy": {
        "name": "cstorcapturenic",
        "count": "[length(range(0, parameters('cstorCount')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}-{1}-capture-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[format('{0}-{1}-capture-ipconfig-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
            "properties": {
              "subnet": {
                "id": "[variables('monsubnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "loadBalancerBackendAddressPools": "[if(variables('cstorilb_enabled'), createArray(createObject('id', resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('cstorlbName'), format('{0}-backend', variables('cstorlbName'))))), createArray())]"
            }
          }
        ],
        "enableAcceleratedNetworking": true,
        "enableIPForwarding": true
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('cstorlbName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]"
      ]
    },
    {
      "condition": "[variables('cstor_enabled')]",
      "copy": {
        "name": "cstorvm",
        "count": "[length(range(0, parameters('cstorCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}-{1}', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('cstorVMSize')]"
        },
        "storageProfile": {
          "copy": [
            {
              "name": "dataDisks",
              "count": "[length(range(0, parameters('cstorDiskCount')))]",
              "input": {
                "name": "[format('{0}-{1}-DataDisk-{2}', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()], range(0, parameters('cstorDiskCount'))[copyIndex('dataDisks')])]",
                "lun": "[range(0, parameters('cstorDiskCount'))[copyIndex('dataDisks')]]",
                "createOption": "Empty",
                "diskSizeGB": "[parameters('cstorDiskSize')]",
                "caching": "ReadWrite",
                "deleteOption": "Delete"
              }
            }
          ],
          "imageReference": {
            "id": "[variables('cstorImageURI')]"
          },
          "osDisk": {
            "osType": "Linux",
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "deleteOption": "Delete"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[range(0, parameters('cstorCount'))[copyIndex()]]))]",
              "properties": {
                "primary": true
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "[format('{0}-{1}', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]",
          "customData": "[variables('$fxv#1')]"
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), parameters('tagsByResource')['Microsoft.Compute/virtualMachines'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[range(0, parameters('cstorCount'))[copyIndex()]]))]"
      ]
    },
    {
      "condition": "[variables('cvu_enabled')]",
      "copy": {
        "name": "cvucapturenic",
        "count": "[length(range(0, parameters('cvuCount')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}-{1}-capture-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[format('{0}-{1}-capture-ipconfig-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
            "properties": {
              "subnet": {
                "id": "[variables('monsubnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "loadBalancerBackendAddressPools": "[if(variables('cvuilb_enabled'), createArray(createObject('id', resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('cvulbName'), format('{0}-backend', variables('cvulbName'))))), createArray())]"
            }
          }
        ],
        "enableAcceleratedNetworking": true,
        "enableIPForwarding": true
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('cvulbName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]"
      ]
    },
    {
      "condition": "[variables('cvu_enabled')]",
      "copy": {
        "name": "cvuvm",
        "count": "[length(range(0, parameters('cvuCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}-{1}', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('cvuVMSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[variables('cvuImageURI')]"
          },
          "osDisk": {
            "osType": "Linux",
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "deleteOption": "Delete"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cvuCount'))[copyIndex()]]))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "[format('{0}-{1}', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]",
          // This is currently not working so this needs to be looked at
          "customData": "[base64(concat('#!/bin/bash\n\nexport REMOTE_IPS=\"', parameters('cVu3rdPartyToolIPs'), '\"\n\n', variables('$cvuv_user_data')))]"
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), parameters('tagsByResource')['Microsoft.Compute/virtualMachines'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cvuCount'))[copyIndex()]]))]"
      ]
    },
    {
      "condition": "[variables('cvuilb_enabled')]",
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2021-03-01",
      "name": "[variables('cvulbName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[format('{0}-frontend', variables('cvulbName'))]",
            "properties": {
              "subnet": {
                "id": "[variables('monsubnetId')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[format('{0}-backend', variables('cvulbName'))]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[format('{0}-to_server', variables('cvulbName'))]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('cvulbName'), format('{0}-frontend', variables('cvulbName')))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('cvulbName'), format('{0}-backend', variables('cvulbName')))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('cvulbName'), format('{0}-probe', variables('cvulbName')))]"
              },
              "frontendPort": 0,
              "backendPort": 0,
              "protocol": "All"
            }
          }
        ],
        "probes": [
          {
            "name": "[format('{0}-probe', variables('cvulbName'))]",
            "properties": {
              "protocol": "Tcp",
              "port": 22,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/loadBalancers'), parameters('tagsByResource')['Microsoft.Network/loadBalancers'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]"
      ]
    },
    {
      "condition": "[variables('cstorilb_enabled')]",
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2021-03-01",
      "name": "[variables('cstorlbName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[format('{0}-frontend', variables('cstorlbName'))]",
            "properties": {
              "subnet": {
                "id": "[variables('monsubnetId')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[format('{0}-backend', variables('cstorlbName'))]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[format('{0}-to_server', variables('cstorlbName'))]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('cstorlbName'), format('{0}-frontend', variables('cstorlbName')))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('cstorlbName'), format('{0}-backend', variables('cstorlbName')))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('cstorlbName'), format('{0}-probe', variables('cstorlbName')))]"
              },
              "frontendPort": 0,
              "backendPort": 0,
              "protocol": "All"
            }
          }
        ],
        "probes": [
          {
            "name": "[format('{0}-probe', variables('cstorlbName'))]",
            "properties": {
              "protocol": "Tcp",
              "port": 22,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/loadBalancers'), parameters('tagsByResource')['Microsoft.Network/loadBalancers'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]"
      ]
    }
  ],
  "outputs": {
    "To_Finish_Provisioning": {
      "type": "string",
      "value": "[if(variables('cclear_enabled'), format('ssh {0}@{1}', parameters('adminUsername'), reference(resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-nic', parameters('cClearVmName'), range(0, parameters('cClearCount'))[0])), '2020-11-01').ipConfigurations[0].properties.privateIPAddress), 'No cClear is Deployed. There is no action to take.')]"
    },
    "Copy_This_and_Paste_Into_ssh_Prompt": {
      "type": "string",
      "value": "[if(variables('cclear_enabled'), 'until [ -x /opt/cloud/deployer.py ]; do echo \"still deploying, please wait...\"; sleep 5; done; /opt/cloud/deployer.py', 'No cClear is Deployed. There is no action to take.')]"
    },
    "cclear_ip": {
      "type": "string",
      "value": "[if(variables('cclear_enabled'), reference(resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-nic', parameters('cClearVmName'), range(0, parameters('cClearCount'))[0])), '2020-11-01').ipConfigurations[0].properties.privateIPAddress, '')]"
    },
    "cvu_ilb_frontend_ip": {
      "type": "string",
      "value": "[if(variables('cvuilb_enabled'), reference(resourceId('Microsoft.Network/loadBalancers', variables('cvulbName')), '2021-03-01').frontendIPConfigurations[0].properties.privateIPAddress, '')]"
    },
    "cvu_provisioning": {
      "type": "array",
      "copy": {
        "count": "[length(range(0, parameters('cvuCount')))]",
        "input": "[if(variables('cvu_enabled'), createObject('index', range(0, parameters('cvuCount'))[copyIndex()], 'name', format('{0}-{1}', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cvuCount'))[copyIndex()]]), 'nic_name', format('{0}-{1}-capture-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cvuCount'))[copyIndex()]]), 'private_ip', reference(resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cvuCount'))[copyIndex()]])), '2020-11-01').ipConfigurations[0].properties.privateIPAddress), createArray())]"
      }
    },
    "cvu_3rd_party_tools": {
      "type": "string",
      "value": "[parameters('cVu3rdPartyToolIPs')]"
    },
    "cstor_ilb_frontend_ip": {
      "type": "string",
      "value": "[if(variables('cstorilb_enabled'), reference(resourceId('Microsoft.Network/loadBalancers', variables('cstorlbName')), '2021-03-01').frontendIPConfigurations[0].properties.privateIPAddress, '')]"
    },
    "cstor_provisioning": {
      "type": "array",
      "copy": {
        "count": "[length(range(0, parameters('cstorCount')))]",
        "input": "[if(variables('cstor_enabled'), createObject('index', range(0, parameters('cstorCount'))[copyIndex()], 'name', format('{0}-{1}', parameters('cstorVmName'), range(0, parameters('cstorCount'))[range(0, parameters('cstorCount'))[copyIndex()]]), 'nic_name', format('{0}-{1}-capture-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[range(0, parameters('cstorCount'))[copyIndex()]]), 'private_ip', reference(resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[range(0, parameters('cstorCount'))[copyIndex()]])), '2020-11-01').ipConfigurations[0].properties.privateIPAddress), createArray())]"
      }
    }
  }
}